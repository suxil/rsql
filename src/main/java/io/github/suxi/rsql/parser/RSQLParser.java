/* RSQLParser.java */
/* Generated By:JavaCC: Do not edit this line. RSQLParser.java */
package io.github.suxi.rsql.parser;

import io.github.suxi.rsql.asm.ConditionSymbol;
import io.github.suxi.rsql.asm.Node;
import io.github.suxi.rsql.asm.NodeFactory;
import io.github.suxi.rsql.asm.WhereNode;
import org.suxi.rsql.asm.*;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class RSQLParser implements RSQLParserConstants {

    private NodeFactory factory;

    public RSQLParser(InputStream stream, String encoding, NodeFactory factory) {
        this(stream, encoding);
        this.factory = factory;
    }

  final public Node parse() throws ParseException {final Node node;
    node = Or();
    jj_consume_token(0);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public Node Or() throws ParseException {final List<Node> nodeList = new ArrayList<Node>(3);
    Node node;
    node = And();
nodeList.add(node);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      node = And();
nodeList.add(node);
    }
{if ("" != null) return nodeList.size() != 1 ? factory.createConditionNode(ConditionSymbol.OR, nodeList) : nodeList.get(0);}
    throw new Error("Missing return statement in function");
}

  final public Node And() throws ParseException {final List<Node> nodeList = new ArrayList<Node>(3);
    Node node;
    node = Constraint();
nodeList.add(node);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      node = Constraint();
nodeList.add(node);
    }
{if ("" != null) return nodeList.size() != 1 ? factory.createConditionNode(ConditionSymbol.AND, nodeList) : nodeList.get(0);}
    throw new Error("Missing return statement in function");
}

  final public Node Constraint() throws ParseException {final Node node;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      node = Group();
      break;
      }
    case UNRESERVED_STR:{
      node = Condition();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public Node Group() throws ParseException {final Node node;
    jj_consume_token(LPAREN);
    node = Or();
    jj_consume_token(RPAREN);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public WhereNode Condition() throws ParseException {final String fieldName;
    final String operate;
    final List<String> value;
    fieldName = FieldName();
    operate = WhereOperator();
    value = WhereValue();
{if ("" != null) return factory.createWhereNode(fieldName, operate, value);}
    throw new Error("Missing return statement in function");
}

  final public String FieldName() throws ParseException {
    token = jj_consume_token(UNRESERVED_STR);
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
}

  final public String WhereOperator() throws ParseException {
    token = jj_consume_token(CONDITION);
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
}

  final public List<String> WhereValue() throws ParseException {final Object value;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        value = MultiValue();
        jj_consume_token(RPAREN);
{if ("" != null) return (List) value;}
        break;
        }
      case UNRESERVED_STR:
      case SINGLE_QUOTED_STR:
      case DOUBLE_QUOTED_STR:{
        value = Value();
{if ("" != null) return Arrays.asList((String) value);}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
{ {if ("" != null) return Arrays.asList("");} }
    }
    throw new Error("Missing return statement in function");
}

  final public List<String> MultiValue() throws ParseException {final List<String> list = new ArrayList<String>(3);
    String arg;
    arg = Value();
list.add(arg);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      arg = Value();
list.add(arg);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public String Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNRESERVED_STR:{
      token = jj_consume_token(UNRESERVED_STR);
{if ("" != null) return token.image;}
      break;
      }
    case SINGLE_QUOTED_STR:
    case DOUBLE_QUOTED_STR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOUBLE_QUOTED_STR:{
        token = jj_consume_token(DOUBLE_QUOTED_STR);
        break;
        }
      case SINGLE_QUOTED_STR:{
        token = jj_consume_token(SINGLE_QUOTED_STR);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return token.image.substring(1, token.image.length() -1);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RSQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x200,0x840,0x9c0,0x400,0x180,0x1c0,};
	}

  /** Constructor with InputStream. */
  public RSQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RSQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RSQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RSQLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RSQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RSQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RSQLParser(RSQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RSQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[14];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 14; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
